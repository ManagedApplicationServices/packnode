#!/usr/bin/env node

var fs = require('fs'), 
    crypto = require('crypto'),
    jsmin = require('./jsmin').jsmin,
    args = process.argv.slice(2);

var stdin = process.openStdin(), input = '';

var cipher, data = '', encrypted, packed, chunk = [],
    encoding = 'hex', 
    algorithm = 'aes256',
    chunk_length = 80,
    password;

var exit = function (msg, is_error) {
    console.log(msg);
    process.exit(1);
};

var usage = ''
  + '\x1b[1mUsage\x1b[0m: packnode [OPTIONS] <PASSWORD>\n'
  + '\n'
  + '\x1b[1mExample 1\x1b[0m: cat input.js | packnode mypassword > output.js\n'
  + '\x1b[1mExample 2\x1b[0m: cat input.coffee | coffee -c -s | packnode mypassword > output.js\n'
  + '\n'
  + '\x1b[1mOptions\x1b[0m:\n'
  + '  -a, --algorithm <..>   Use the specified algorithm. Default is "aes256"\n'
  + '  -e, --encoding <..>    Encode with base64|hex|binary. Default is "hex"\n'
  + '  -h, --help             Display help information\n'
  ;

if (!args.length) {
    exit(usage);
}

while (args.length) {
    arg = args.shift();
    switch (arg) {
    case '-a':
    case '--algorithm':
        algorithm = args.shift();
        break;
    case '-e':
    case '--encoding':
        encoding = args.shift();
        break;
    case '-h':
    case '--help':
        exit(usage);
        break;
    default:
        password = arg;
        break;
    }
}

// Read from stdin
stdin.setEncoding('utf8');
stdin.on('data', function (input) { data += input; });
stdin.on('end', function () { 

    // Minify the file
    data = jsmin(data);
    
    // Encrypt the file
    cipher = crypto.createCipher(algorithm, password);
    encrypted = cipher.update(data, 'binary', encoding) + cipher.final(encoding); 
    for (var i = 0, l = encrypted.length; i < l; i += chunk_length) {
        chunk.push(encrypted.substr(i, chunk_length));
    }

    // Prepare the output
    packed  = 'packed =  "' + chunk.join('";\npacked += "') + '";\n';
    packed += 'exports.unpack = function (password) {\n';
    packed += '    var decipher = require("crypto").createDecipher("' + algorithm + '", password);\n';
    packed += '    eval(decipher.update(packed, "' + encoding + '", "utf8") + decipher.final("utf8"));\n';
    packed += '    return exports;\n';
    packed += '};';

    // ..and write to stdout
    process.stdout.write(packed);
    
});